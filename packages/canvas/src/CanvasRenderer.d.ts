import { Canvas, DotFactory, DotType } from '@dot-map-renderer/component';
import { IRendererOption } from './IRendererOption';
import { IRenderer } from './IRenderer';
import { RendererContext } from './RendererContext';
import { Layer } from './Layer';
import { AnimationManager } from './AnimationManager';
export declare class CanvasRenderer implements IRenderer {
  private readonly layers;
  readonly bufferCanvas: Canvas;
  private attachingElement;
  canvas: Canvas;
  parent: HTMLElement;
  option: IRendererOption;
  _pixelSize: number;
  _gapSize: number;
  _pixelColor: string;
  _dotFactory: DotFactory;
  stageHeight: number;
  stageWidth: number;
  stageX: number;
  stageY: number;
  zoom: number;
  animation?: AnimationManager;
  get pixelAndGapSize(): number;
  get pixelSize(): number;
  set pixelSize(pixelSize: number);
  get gapSize(): number;
  set gapSize(gapSize: number);
  set backgroundColor(backgroundColor: string);
  get pixelColor(): string;
  set pixelColor(pixelColor: string);
  get canvasOffsetWidth(): number;
  get canvasOffsetHeight(): number;
  setDotFactory(dotType: DotType): void;
  get dotFactory(): DotFactory;
  constructor(attachingElement: HTMLElement, rendererOption: IRendererOption);
  private initHTML;
  private initLayer;
  private resizeStage;
  resize: () => void;
  getContext: () => RendererContext;
  getLayer: <T extends Layer = Layer>(layerKey: string) => T;
  refresh: () => void;
  remove(): void;
}
